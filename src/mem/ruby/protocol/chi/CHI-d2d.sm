/*
 * Copyright (c) 2021-2023 Arm Limited
 * All rights reserved
 *
 * The license below extends only to copyright in the software and shall
 * not be construed as granting a license to any other intellectual
 * property including but not limited to intellectual property relating
 * to a hardware implementation of the functionality of the software
 * licensed hereunder.  You may use the software subject to the license
 * terms below provided that you ensure that this notice is replicated
 * unmodified and in its entirety in all distributions of the software,
 * modified or unmodified, in source code or in binary form.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met: redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer;
 * redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution;
 * neither the name of the copyright holders nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


machine(MachineType:D2D, "D2D") :


  int data_channel_size;
  // Interface to the network
  // Note vnet_type is used by Garnet only. "response" type is assumed to
  // have data, so use it for data channels and "none" for the rest.
  // network="To" for outbound queue; network="From" for inbound
  // virtual networks: 0=request, 1=snoop, 2=response, 3=data
  MessageBuffer * reqOut,   network="To", virtual_network="0", vnet_type="none";
  MessageBuffer * snpOut,   network="To", virtual_network="1", vnet_type="none";
  MessageBuffer * rspOut,   network="To", virtual_network="2", vnet_type="none";
  MessageBuffer * datOut,   network="To", virtual_network="3", vnet_type="response";

  MessageBuffer * reqD2DOut,   network="To", virtual_network="4", vnet_type="none";
  MessageBuffer * snpD2DOut,   network="To", virtual_network="5", vnet_type="none";
  MessageBuffer * rspD2DOut,   network="To", virtual_network="6", vnet_type="none";
  MessageBuffer * datD2DOut,   network="To", virtual_network="7", vnet_type="response";


  MessageBuffer * reqIn,   network="From", virtual_network="0", vnet_type="none";
  MessageBuffer * snpIn,   network="From", virtual_network="1", vnet_type="none";
  MessageBuffer * rspIn,   network="From", virtual_network="2", vnet_type="none";
  MessageBuffer * datIn,   network="From", virtual_network="3", vnet_type="response";

  MessageBuffer * reqD2DIn,   network="From", virtual_network="4", vnet_type="none";
  MessageBuffer * snpD2DIn,   network="From", virtual_network="5", vnet_type="none";
  MessageBuffer * rspD2DIn,   network="From", virtual_network="6", vnet_type="none";
  MessageBuffer * datD2DIn,   network="From", virtual_network="7", vnet_type="response";

{

  ////////////////////////////////////////////////////////////////////////////
  // States
  ////////////////////////////////////////////////////////////////////////////

  state_declaration(State, desc="Transaction states", default="D2D_State_READY") {
    READY,       AccessPermission:Backing_Store,            desc="Ready State"; 

  }


  ////////////////////////////////////////////////////////////////////////////
  // Events
  ////////////////////////////////////////////////////////////////////////////

  enumeration(Event) {
    SendResponseD2D_Remote2Local,   desc="Allocates Request in D2D";
    SendResponseD2D_Local2Remote,   desc="Send response across D2D from local to remote";
    SendRequestD2D_Local2Remote,    desc="Send reqeust across D2D";
    SendRequestD2D_Remote2Local,    desc="Send reqeust across D2D from Remote to Local";
      // Data
    WriteData, desc="";

  }
  Event dataToEvent (CHIDataType type) {
    if (type == CHIDataType:NCBWrData) {
      return Event:WriteData;
    } else {
      error("Invalid CHIDataType");
    }
  }
  ////////////////////////////////////////////////////////////////////////////
  // Data structures
  ////////////////////////////////////////////////////////////////////////////

  // Cache block size
  int blockSize, default="RubySystem::getBlockSizeBytes()";

  // TBE fields
  structure(TBE, desc="...") {
    int storSlot,   desc="Slot in the storage tracker occupied by this entry";
    Addr addr,      desc="Line address for this TBE";
    Addr accAddr,   desc="Original access address. Set only for Write*Ptl";
    Addr txnId,     desc="Transaction ID";
    int  accSize,   desc="Access size. Set only for Write*Ptl";
    State state,    desc="Current line state";
    DataBlock dataBlk, desc="Transaction data";
    WriteMask dataBlkValid, desc="valid bytes in dataBlk";
    int rxtxBytes, desc="Bytes sent or received";
    MachineID requestor, desc="Requestor that originated this request";
    MachineID destination, desc="Where we are sending data";
    bool useDataSepResp, desc="Replies with DataSepResp instead of CompData";
  }

  structure(TBETable, external ="yes") {
    TBE lookup(Addr);
    void allocate(Addr);
    void deallocate(Addr);
    bool isPresent(Addr);
    bool areNSlotsAvailable(int n, Tick curTime);
  }

  structure(TBEStorage, external ="yes") {
    int size();
    int capacity();
    int reserved();
    int slotsAvailable();
    bool areNSlotsAvailable(int n);
    void incrementReserved();
    void decrementReserved();
    int addEntryToNewSlot();
    void removeEntryFromSlot(int slot);
  }

  TBETable TBEs, template="<D2D_TBE>", constructor="m_number_of_TBEs";
  TBEStorage storTBEs, constructor="this, m_number_of_TBEs";


  ////////////////////////////////////////////////////////////////////////////
  // External functions
  ////////////////////////////////////////////////////////////////////////////

  Tick clockEdge();
  void set_tbe(TBE b);
  void unset_tbe();
  void wakeUpAllBuffers(Addr a);
  bool respondsTo(Addr addr);
  ////////////////////////////////////////////////////////////////////////////
  // Interface functions required by SLICC
  ////////////////////////////////////////////////////////////////////////////

  State getState(TBE tbe, Addr addr) {
    if (is_valid(tbe)) {
        assert(tbe.addr == addr);
        return tbe.state;
    } else {
        return State:READY;
    }
  }

  void setState(TBE tbe, Addr addr, State state) {
    if (is_valid(tbe)) {
      assert(tbe.addr == addr);
      tbe.state := state;
    }
  }

  AccessPermission getAccessPermission(Addr addr) {
    return AccessPermission:NotPresent;
  }

  void setAccessPermission(Addr addr, State state) {
  }

  void functionalRead(Addr addr, Packet *pkt, WriteMask &mask) {
    if (respondsTo(addr)) {
      DPRINTF(RubySlicc, "functionalRead %x\n", addr);
      TBE tbe := TBEs[addr];

      if (mask.isEmpty()) {
        functionalMemoryRead(pkt);
        mask.fillMask();
        DPRINTF(RubySlicc, "functionalRead mem %x %s\n", addr, mask);
      }

      // Update with any transient data
      //TODO additional handling of partial data ??
      if (is_valid(tbe)) {
        WriteMask read_mask;
        read_mask.setMask(addressOffset(tbe.accAddr, tbe.addr), tbe.accSize);
        read_mask.andMask(tbe.dataBlkValid);
        if (read_mask.isEmpty() == false) {
          testAndReadMask(addr, tbe.dataBlk, read_mask, pkt);
          DPRINTF(RubySlicc, "functionalRead tbe %x %s %s %s\n", addr, tbe.dataBlk, read_mask, mask);
          mask.orMask(read_mask);
        }
      }
    }
  }

  int functionalWrite(Addr addr, Packet *pkt) {
    if(respondsTo(addr)) {
      int num_functional_writes := 0;
      TBE tbe := TBEs[addr];
      if (is_valid(tbe)) {
        num_functional_writes := num_functional_writes +
          testAndWrite(addr, tbe.dataBlk, pkt);
        DPRINTF(RubySlicc, "functionalWrite tbe %x %s\n", addr, tbe.dataBlk);
      }
      num_functional_writes := num_functional_writes + functionalMemoryWrite(pkt);
      DPRINTF(RubySlicc, "functionalWrite mem %x\n", addr);
      return num_functional_writes;
    } else {
      return 0;
    }
  }
  ////////////////////////////////////////////////////////////////////////////
  // Input/output port definitions
  ////////////////////////////////////////////////////////////////////////////

  // Outbound port definitions
  out_port(reqOutPort, CHIRequestMsg, reqOut);
  out_port(snpOutPort, CHIRequestMsg, snpOut);
  out_port(rspOutPort, CHIResponseMsg, rspOut);
  out_port(datOutPort, CHIDataMsg, datOut);
  out_port(reqD2DOutPort, CHIRequestMsg, reqD2DOut);
  out_port(snpD2DOutPort, CHIRequestMsg, snpD2DOut);
  out_port(rspD2DOutPort, CHIResponseMsg, rspD2DOut);
  out_port(datD2DOutPort, CHIDataMsg, datD2DOut);


  // Inbound port definitions
    // Response
  in_port(rspD2DInPort, CHIResponseMsg, rspD2DIn, rank=7) {
    if (rspD2DInPort.isReady(clockEdge())) {
        peek(rspD2DInPort, CHIResponseMsg) {
            trigger(Event:SendResponseD2D_Remote2Local, in_msg.addr, TBEs[in_msg.addr]);
        }
    }
    }

  in_port(rspInPort, CHIResponseMsg, rspIn, rank=6) {
    if (rspInPort.isReady(clockEdge())) {
      peek(rspInPort, CHIResponseMsg) {
        error("Unexpected message");
      }
    }
  }

  in_port(datD2DInPort, CHIDataMsg, datD2DIn, rank=5) {
    if (datD2DInPort.isReady(clockEdge())) {
      peek(datD2DInPort, CHIDataMsg) {
        assert((in_msg.bitMask.count() <= data_channel_size)
                && (in_msg.bitMask.count() > 0));
        trigger(dataToEvent(in_msg.type), in_msg.addr, TBEs[in_msg.addr]);
      }
    }
  }

  in_port(datInPort, CHIDataMsg, datIn, rank=4) {
    if (datInPort.isReady(clockEdge())) {
      peek(datInPort, CHIDataMsg) {
        assert((in_msg.bitMask.count() <= data_channel_size)
                && (in_msg.bitMask.count() > 0));
        trigger(dataToEvent(in_msg.type), in_msg.addr, TBEs[in_msg.addr]);
      }
    }
  }

  in_port(snpD2DInPort, CHIRequestMsg, snpD2DIn, rank=3) {
    if (snpD2DInPort.isReady(clockEdge())) {
      peek(snpD2DInPort, CHIRequestMsg) {
        error("Unexpected message");
      }
    }
  }

  // Snoops
  in_port(snpInPort, CHIRequestMsg, snpIn, rank=2) {
    if (snpInPort.isReady(clockEdge())) {
      peek(snpInPort, CHIRequestMsg) {
        error("Unexpected message");
      }
    }
  }

    // Request
  in_port(reqD2DInPort, CHIRequestMsg, reqD2DIn, rank=1) {
      if (reqD2DInPort.isReady(clockEdge())) {
          peek(reqD2DInPort, CHIRequestMsg) {
            trigger(Event:SendRequestD2D_Remote2Local, in_msg.addr, TBEs[in_msg.addr]);
          }
      }
    }

in_port(reqInPort, CHIRequestMsg, reqD2DIn, rank=0) {
    if (reqInPort.isReady(clockEdge())) {
      peek(reqInPort, CHIRequestMsg) {
        if (in_msg.allowRetry) {
          trigger(Event:SendRequestD2D_Local2Remote, in_msg.addr, TBEs[in_msg.addr]);
        } else {
          // Only expected requests that do not allow retry are the ones that
          // are being retried after receiving credit
          trigger(Event:SendRequestD2D_Local2Remote,
                  in_msg.addr, TBEs[in_msg.addr]);
        }
      }
    }
  }


  ////////////////////////////////////////////////////////////////////////////
  // Actions and transitions
  ////////////////////////////////////////////////////////////////////////////

action(D2D_Request_Local2Remote, desc="") {

    peek(reqInPort, CHIRequestMsg) {
      enqueue(reqD2DOutPort, CHIRequestMsg, 0) {
       // assert(in_msg.addr == address);
        out_msg := in_msg;
      }
    }
    reqInPort.dequeue(clockEdge());
}

action(D2D_Request_Remote2Local, desc="") {

    peek(reqD2DInPort, CHIRequestMsg) {
      enqueue(reqOutPort, CHIRequestMsg, 0) {
       // assert(in_msg.addr == address);
        out_msg := in_msg;
      }
    }
    reqD2DInPort.dequeue(clockEdge());
}

action(D2D_Response_Remote2Local, desc="") {

    peek(rspD2DInPort, CHIResponseMsg) {
      enqueue(rspOutPort, CHIResponseMsg, 0) {
       // assert(in_msg.addr == address);
        out_msg := in_msg;
      }
    }
     rspD2DInPort.dequeue(clockEdge());
}

action(D2D_Response_Local2Remote, desc="") {

    peek(rspInPort, CHIResponseMsg) {
      enqueue(rspD2DOutPort, CHIResponseMsg, 0) {
       // assert(in_msg.addr == address);
        out_msg := in_msg;
      }
    }
     rspInPort.dequeue(clockEdge());
}


  ////////////////////////////////////////////////////////////////////////////
  // Transitions
  ////////////////////////////////////////////////////////////////////////////

 transition(READY, SendRequestD2D_Local2Remote) {
  D2D_Request_Local2Remote;
}

transition(READY, SendResponseD2D_Remote2Local) {
  D2D_Response_Remote2Local;
}

 transition(READY, SendRequestD2D_Remote2Local) {
  D2D_Request_Remote2Local;
}

transition(READY, SendResponseD2D_Local2Remote) {
  D2D_Response_Local2Remote;
}
}
